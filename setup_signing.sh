#!/bin/bash

# LineageOS 21+ or based Build Signing Script
# This script automates the process of generating and setting up signing keys
# for LineageOS 21 and newer versions.

# Exit on any error
set -e

# Enable debug mode - prints each command before execution
set -x

# Configuration Variables
# ----------------------
# Default location for Android build environment
ANDROID_BUILD_TOP="${ANDROID_BUILD_TOP:-$(pwd)}"
# Location for temporary key storage
TEMP_KEYS_DIR="$HOME/.android-certs"
# Final location for keys in vendor directory
VENDOR_KEYS_DIR="$ANDROID_BUILD_TOP/vendor/lineage-priv/keys"
# List of required keys for Android 13+
REQUIRED_KEYS=(
    "releasekey"
    "platform"
    "shared"
    "media"
    "networkstack"
    "testkey"
    "bluetooth"
    "sdk_sandbox"
    "verifiedboot"
)

# Function to display colorful messages
# Usage: print_message "message" "type"
print_message() {
    local message="$1"
    local type="${2:-info}"
    local color_code
    
    case "$type" in
        "info") color_code="\033[0;34m" ;; # Blue
        "success") color_code="\033[0;32m" ;; # Green
        "warning") color_code="\033[0;33m" ;; # Yellow
        "error") color_code="\033[0;31m" ;; # Red
        *) color_code="\033[0m" ;; # Default
    esac
    
    echo -e "${color_code}[${type^^}]\033[0m ${message}"
}

# Function to check if required commands exist
check_requirements() {
    local required_commands=("openssl" "keytool" "git")
    
    for cmd in "${required_commands[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            print_message "Required command '$cmd' not found. Please install it first." "error"
            exit 1
        fi
    done
}

# Function to get user information for certificate subject
get_user_info() {
    print_message "Please enter your information for the certificate subject" "info"
    
    read -p "Country Code (2 letters, e.g., DE): " country
    read -p "State/Province: " state
    read -p "City/Locality: " city
    read -p "Organization: " org
    read -p "Email: " email
    
    # Construct the subject string
    CERT_SUBJECT="/C=$country/ST=$state/L=$city/O=$org/OU=$org/CN=$org/emailAddress=$email"
    
    # Show the final subject for confirmation
    print_message "Certificate subject will be: $CERT_SUBJECT" "info"
    read -p "Is this correct? (y/n): " confirm
    
    if [[ $confirm != "y" ]]; then
        print_message "Aborting on user request" "error"
        exit 1
    fi
}

# Function to generate a single key
generate_key() {
    local key_name="$1"
    local subject="$2"
    local key_dir="$3"
    
    print_message "Generating key: $key_name" "info"
    
    # Check if development/tools/make_key exists
    if [[ ! -f "$ANDROID_BUILD_TOP/development/tools/make_key" ]]; then
        print_message "make_key script not found. Are you in the correct directory?" "error"
        exit 1
    fi
    
    # Generate the key using LineageOS make_key script
    # Note: Intentionally not setting a password as it breaks the build process
    "$ANDROID_BUILD_TOP/development/tools/make_key" "$key_dir/$key_name" "$subject" >/dev/null 2>&1 || {
        print_message "Failed to generate key: $key_name" "error"
        exit 1
    }
    
    print_message "Successfully generated key: $key_name" "success"
}

# Function to set up vendor directory structure
setup_vendor_directory() {
    print_message "Setting up vendor directory structure" "info"
    
    # Create vendor directory
    mkdir -p "$VENDOR_KEYS_DIR"
    
    # Move keys to vendor directory
    mv "$TEMP_KEYS_DIR"/* "$VENDOR_KEYS_DIR"/ || {
        print_message "Failed to move keys to vendor directory" "error"
        exit 1
    }
    
    # Create keys.mk
    cat > "$VENDOR_KEYS_DIR/keys.mk" << EOF
# Automatically generated by LineageOS 21+ signing script
PRODUCT_DEFAULT_DEV_CERTIFICATE := vendor/lineage-priv/keys/releasekey
EOF
    
    # Create BUILD.bazel
    cat > "$VENDOR_KEYS_DIR/BUILD.bazel" << EOF
filegroup(
    name = "android_certificate_directory",
    srcs = glob([
        "*.pk8",
        "*.pem",
    ]),
    visibility = ["//visibility:public"],
)
EOF
    
    print_message "Vendor directory setup completed" "success"
}

# Function to verify the setup
verify_setup() {
    print_message "Verifying setup" "info"
    
    # Check if all keys exist
    for key in "${REQUIRED_KEYS[@]}"; do
        if [[ ! -f "$VENDOR_KEYS_DIR/$key.pk8" ]] || [[ ! -f "$VENDOR_KEYS_DIR/$key.x509.pem" ]]; then
            print_message "Missing key files for: $key" "error"
            exit 1
        fi
    done
    
    # Check if configuration files exist
    if [[ ! -f "$VENDOR_KEYS_DIR/keys.mk" ]] || [[ ! -f "$VENDOR_KEYS_DIR/BUILD.bazel" ]]; then
        print_message "Missing configuration files" "error"
        exit 1
    fi
    
    print_message "Setup verification completed successfully" "success"
}

# Main execution
main() {
    print_message "Starting LineageOS 21+ signing setup" "info"
    
    # Check requirements
    check_requirements
    
    # Get user information
    get_user_info
    
    # Create temporary directory for keys
    mkdir -p "$TEMP_KEYS_DIR"
    
    # Generate all required keys
    for key in "${REQUIRED_KEYS[@]}"; do
        generate_key "$key" "$CERT_SUBJECT" "$TEMP_KEYS_DIR"
    done
    
    # Set up vendor directory
    setup_vendor_directory
    
    # Verify setup
    verify_setup
    
    # Clean up temporary directory
    rm -rf "$TEMP_KEYS_DIR"
    
    print_message "Signing setup completed successfully!" "success"
    print_message "IMPORTANT: Never share or publish the contents of $VENDOR_KEYS_DIR" "warning"
    print_message "Make sure to back up your keys securely" "warning"
}

# Execute main function
main "$@"
